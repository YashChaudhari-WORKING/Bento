Absolutely ‚Äî here is a **fully detailed MongoDB schema design document** with **all necessary models**, each explained with:

- üéØ Purpose
- üß± Field breakdown (with types, validations, examples)
- üîê Auth-related details
- üõ†Ô∏è Indexing and production notes

This is the **production-grade data model** for your **Linear-style project management SaaS app**, skipping the `Company` layer as discussed.

---

# ‚úÖ 1. **User Model**

### üéØ Purpose:

Stores login credentials, user profile, and email verification info.

### üß± Fields:

| Field          | Type     | Required | Unique | Description               |
| -------------- | -------- | -------- | ------ | ------------------------- |
| `_id`          | ObjectId | Yes      | Yes    | Auto-generated by MongoDB |
| `name`         | String   | Yes      | No     | Full name of the user     |
| `email`        | String   | Yes      | ‚úÖ Yes | Used for login + invites  |
| `passwordHash` | String   | Yes      | ‚ùå     | Hashed password (bcrypt)  |
| `avatarUrl`    | String   | No       | No     | Optional profile image    |
| `isVerified`   | Boolean  | No       | No     | For email verification    |
| `createdAt`    | Date     | Yes      | No     | Timestamp                 |
| `updatedAt`    | Date     | Yes      | No     | Auto-updated              |

### üõ†Ô∏è Notes:

- üîê Store only the password **hash**, never the plain password.
- ‚úÖ Add a unique index on `email`.
- You can later add fields like `lastLogin`, `provider` (if using OAuth).

---

# ‚úÖ 2. **Workspace Model**

### üéØ Purpose:

Root object ‚Äî holds teams, projects, tasks, members.

### üß± Fields:

| Field       | Type     | Required | Unique | Description                     |
| ----------- | -------- | -------- | ------ | ------------------------------- |
| `_id`       | ObjectId | Yes      | Yes    | Primary key                     |
| `name`      | String   | Yes      | No     | Workspace name                  |
| `slug`      | String   | Yes      | ‚úÖ Yes | Used in URL (`/workspace-slug`) |
| `createdBy` | ObjectId | Yes      | No     | Ref to User who created it      |
| `createdAt` | Date     | Yes      | No     | Timestamp                       |
| `updatedAt` | Date     | Yes      | No     | Timestamp                       |

### üõ†Ô∏è Notes:

- ‚úÖ Add index on `slug` for fast lookup.
- Slug should be **unique across all workspaces**.
- You can add `logo`, `theme`, or `domain` later if needed.

---

# ‚úÖ 3. **Membership Model**

### üéØ Purpose:

Links a user to a workspace with a role (multi-tenant logic).

### üß± Fields:

| Field         | Type     | Required | Description                       |
| ------------- | -------- | -------- | --------------------------------- |
| `_id`         | ObjectId | Yes      | Primary key                       |
| `userId`      | ObjectId | Yes      | Ref to User                       |
| `workspaceId` | ObjectId | Yes      | Ref to Workspace                  |
| `role`        | String   | Yes      | `"admin"`, `"member"`, `"viewer"` |
| `joinedAt`    | Date     | Yes      | Timestamp                         |

### üõ†Ô∏è Notes:

- ‚úÖ Add compound index: `{ userId: 1, workspaceId: 1 }` (unique)
- Useful for checking access control

---

# ‚úÖ 4. **Team Model (optional)**

### üéØ Purpose:

Optional sub-groups in a workspace (e.g., "Design", "Frontend").

### üß± Fields:

| Field         | Type     | Required | Description           |
| ------------- | -------- | -------- | --------------------- |
| `_id`         | ObjectId | Yes      | Primary key           |
| `name`        | String   | Yes      | Team name             |
| `workspaceId` | ObjectId | Yes      | Belongs to workspace  |
| `createdBy`   | ObjectId | Yes      | Ref to creator (User) |
| `createdAt`   | Date     | Yes      | Timestamp             |

---

# ‚úÖ 5. **Project Model**

### üéØ Purpose:

Container for tasks ‚Äî scoped to a workspace.

### üß± Fields:

| Field         | Type     | Required | Description              |
| ------------- | -------- | -------- | ------------------------ |
| `_id`         | ObjectId | Yes      | Primary key              |
| `name`        | String   | Yes      | Project name             |
| `workspaceId` | ObjectId | Yes      | Ref to Workspace         |
| `teamId`      | ObjectId | No       | Optional team            |
| `status`      | String   | Yes      | `"active"`, `"archived"` |
| `createdBy`   | ObjectId | Yes      | Ref to User              |
| `createdAt`   | Date     | Yes      | Timestamp                |

---

# ‚úÖ 6. **Task Model**

### üéØ Purpose:

Core unit of work ‚Äî like issues, to-dos, tickets.

### üß± Fields:

| Field         | Type     | Required | Description                         |
| ------------- | -------- | -------- | ----------------------------------- |
| `_id`         | ObjectId | Yes      | Primary key                         |
| `title`       | String   | Yes      | Task name                           |
| `description` | String   | No       | Markdown or rich text               |
| `workspaceId` | ObjectId | Yes      | Ref to Workspace                    |
| `projectId`   | ObjectId | No       | Ref to Project                      |
| `teamId`      | ObjectId | No       | Ref to Team                         |
| `assigneeId`  | ObjectId | No       | Ref to User                         |
| `status`      | String   | Yes      | `"todo"`, `"in-progress"`, `"done"` |
| `priority`    | Number   | No       | 1‚Äì5 (1 = highest)                   |
| `dueDate`     | Date     | No       | Optional deadline                   |
| `createdBy`   | ObjectId | Yes      | User who created it                 |
| `createdAt`   | Date     | Yes      | Timestamp                           |
| `updatedAt`   | Date     | Yes      | Auto-updated                        |

---

# ‚úÖ 7. **Invite Model (optional, but useful)**

### üéØ Purpose:

Handles invites before user accepts (email ‚Üí token).

### üß± Fields:

| Field         | Type     | Required | Description               |
| ------------- | -------- | -------- | ------------------------- |
| `_id`         | ObjectId | Yes      | Primary key               |
| `email`       | String   | Yes      | Invitee email             |
| `workspaceId` | ObjectId | Yes      | Target workspace          |
| `role`        | String   | Yes      | Role on join              |
| `token`       | String   | Yes      | Secure string             |
| `status`      | String   | Yes      | `"pending"`, `"accepted"` |
| `invitedBy`   | ObjectId | Yes      | Ref to User               |
| `createdAt`   | Date     | Yes      | Timestamp                 |

---

## üîê Auth-Specific Notes

| Feature         | How You Handle It                                      |
| --------------- | ------------------------------------------------------ |
| Password        | Store as bcrypt hash                                   |
| JWT             | Store userId in token payload                          |
| Cookies         | Use `Set-Cookie` with `HttpOnly`, `Secure`, `SameSite` |
| Session         | Validate token on each API request                     |
| Workspace auth  | Check `Membership` entry before granting access        |
| Multi-workspace | Query `Membership` to get all workspaces for a user    |

---

## ‚úÖ Final Indexing Checklist

| Collection    | Index                                             |
| ------------- | ------------------------------------------------- |
| `users`       | `{ email: 1 }` (unique)                           |
| `workspaces`  | `{ slug: 1 }` (unique)                            |
| `memberships` | `{ userId: 1, workspaceId: 1 }` (unique compound) |
| `projects`    | `{ workspaceId: 1 }`                              |
| `tasks`       | `{ workspaceId: 1, assigneeId: 1 }`               |
| `invites`     | `{ email: 1, workspaceId: 1 }`                    |

---

If you want, I can now generate:
‚úÖ The actual Mongoose schema code for these
‚úÖ OR Prisma schema if you're using Prisma
‚úÖ OR a sample document for each (to seed your DB)

Just say what you prefer: **"Give Mongoose schemas"**, **"Give Prisma schema"**, or **"Show sample JSON documents"**.
